# -*-Perl-*-

# tcsh-RunTCSH.ntest -
#
# ECTCSH
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;

 
# system tests


require "$::gTestFileDir/../../EC-TCSH/systemtest/tcsh-common.ntest";


$::grunTCSHCreated = 0;
$::gProjectImported = 0;

#stores the result wheter the result of the procedure is success or error
my $outcome = "";




sub importProject() {
    assertOK($::N->import(
                     { file =>"$::gTestFileDir/tcshTests.xml",
               path  => "/projects/tcshTests",
               force => 1
             } ), "import runNMakeCommandLine");
   
    assertOK($::N->getProcedure("tcshTests", "correctTCSHSyntax"),"correctTCSHSyntax procedure exists");
    assertOK($::N->getProcedure("tcshTests", "incorrectTCSHSyntax"),"incorrectTCSHSyntax procedure exists");
   
    $::gProjectImported = 1;
}



sub doSetup() {

    if(! $::gProjectImported) {
        importProject();
    }

}

#correctTCSHSyntax 

#Test TCSH command with a correct syntax 

 ntest "correctTCSHSyntax", {}, sub {
      doSetup();
      # run test job
     
         my $xpath = $::N->runProcedure("tcshTests", 
                 { procedureName => "correctTCSHSyntax",
                 pollInterval  => '1',
                 timeout => 600,
                      actualParameter => [
                     
                     ]
          });
                 # make sure it finished
             my $jobId = 0;
             my $status = "";
             
             assertOK($xpath, "runProcedure with errors");
             if ($xpath) {
                 $jobId  = $xpath->findvalue("//jobId");
                 $status = $xpath->findvalue("//status");
                 $outcome = $xpath->findvalue("//outcome");
         
                 assertTrue($jobId && $jobId ne "",'valid job id');
                 assertEq('completed',$status,"job $jobId complete");
         
                 #abort if job did not finish
                 if ($status ne "completed") {
                     assertOK($::N->abortJob($jobId, {force => 1}));
                 }
             }
 
     # get the job details
     $xpath = $::N->getJobDetails($jobId);
 
     # write the job details to a file in the test directory
     writeFile("$::gCurrentTestDir/jobDetails.log","====start Job Details====\n$xpath->{_xml}\n\n====end job details===\n\n");
 
     # get the value of the tcshCommandLine property
     my $cmd = $xpath->findvalue("//property[propertyName='tcshCommand']/value");
 
     # make sure the $cmd is what was expected
     assertEq("alloc", $cmd, "tcsh correct syntax");
     
  };
  
  
  #incorrectTCSHSyntax

#Test a tcsh command with a incorrect syntax 

 ntest "incorrectTCSHSyntax", {}, sub {
      doSetup();
      # run test job
     
         my $xpath = $::N->runProcedure("tcshTests", 
                 { procedureName => "incorrectTCSHSyntax",
                 pollInterval  => '1',
                 timeout => 600,
                      actualParameter => [
                     
                     ]
          });
                 # make sure it finished
             my $jobId = 0;
             my $status = "";
             
             assertOK($xpath, "runProcedure with errors");
             if ($xpath) {
                 $jobId  = $xpath->findvalue("//jobId");
                 $status = $xpath->findvalue("//status");
                 $outcome = $xpath->findvalue("//outcome");
         
                 assertTrue($jobId && $jobId ne "",'valid job id');
                 assertEq('completed',$status,"job $jobId complete");
         
                 #abort if job did not finish
                 if ($status ne "completed") {
                     assertOK($::N->abortJob($jobId, {force => 1}));
                 }
             }
 
     # get the job details
     $xpath = $::N->getJobDetails($jobId);
 
     # write the job details to a file in the test directory
     writeFile("$::gCurrentTestDir/jobDetails.log","====start Job Details====\n$xpath->{_xml}\n\n====end job details===\n\n");
 
     # get the value of the tcshCommandLine property
     my $cmd = $xpath->findvalue("//property[propertyName='tcshCommand']/value");
 
     # make sure the $cmd is what was expected
     assertEq("allo", $cmd, "tcsh incorrect syntax");
  }
